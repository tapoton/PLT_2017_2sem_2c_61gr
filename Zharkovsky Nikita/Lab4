// Lab 4. Task Toy maze
// Zharkovsky Nikita

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

struct Position 
{
	int i;
	int j;
	Position(const int i, const int j) {
		this->i = i;
		this->j = j;
	}
};

int main()
{
	int n, m;
	cin >> n >> m;
	vector< vector<int> > a(1 + n + 1, vector<int> (1 + m + 1, 1)); //a[n+2][n+2] - game board with walls
	for(int i = 1; i <= n; i++)
	    for(int j = 1; j <= m; j++)
	        cin>>a[i][j];
	        
	const int UNDEFINED = -1;
	//the number of changes of direction
	vector< vector<int> > len(1 + n + 1, vector<int> (1 + m + 1, UNDEFINED));
	
	/*====================================================================*/
	// GRAPH STRUCTURE:
	// Vertex - cell where the ball stopped (or fell), coming from any side.
    // Edge - if the ball can roll from vertex.
    /*====================================================================*/
    
	//Breadth-first search (BFS)
	queue<Position> q;
	len[1][1] = 0;
	q.push(Position(1, 1)); //starting from top left corner
	while(!q.empty()) //while queue is not empty
	{
		Position cur = q.front(); //extract first element
		q.pop();
		if(a[cur.i][cur.j] == 2) // check whether the current node is the target
		{
			cout<<len[cur.i][cur.j];
			return 0;
		}
		// all child of the current node (4 directions)
		for(int di = -1; di <= 1; di++)
		{
			for(int dj = -1; dj <=1; dj++)
			{
				if(di * di + dj * dj == 1)
				{
					int curi = cur.i;
					int curj = cur.j;
					while(true) //go to the wall or hole
					{
						if(a[curi][curj] == 2) //it's hole!
						    break;
						if(a[curi+di][curj+dj] == 1) //it's wall!
						    break;
						curi += di;
						curj += dj;
					}
					if(len[curi][curj] == UNDEFINED)
					{
						len[curi][curj] = len[cur.i][cur.j] + 1;
						q.push(Position(curi, curj));
					}
				}
			}
		}
	}
	cout<<0;
}
